{"created":[2014,3,21,7,22,57],"id":"7E010BE86C","browser":"Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:27.0) Gecko/20100101 Firefox/27.0","language":"Java-JUnit-Mockito","exercise":"Verbal","unit_test_framework":"junit","tab_size":4,"visible_files":{"Alarm.java":"\npublic class Alarm\n{\n    private final double LowPressureThreshold = 17;\n    private final double HighPressureThreshold = 21;\n\n    Sensor sensor = new Sensor();\n\n    boolean alarmOn = false;\n\n    public void check()\n    {\n        double psiPressureValue = sensor.popNextPressurePsiValue();\n\n        if (psiPressureValue < LowPressureThreshold || HighPressureThreshold < psiPressureValue)\n        {\n            alarmOn = true;\n        }\n    }\n\n    public boolean isAlarmOn()\n    {\n        return alarmOn; \n    }\n}\n","AlarmTest.java":"import org.junit.*;\nimport static org.junit.Assert.*;\nimport static org.mockito.Mockito.*;\n\npublic class AlarmTest {\n    \n    @Test\n    public void foo() {\n        Alarm alarm = new Alarm();\n        assertTrue(alarm.isAlarmOn());\n    }\n}\n","Sensor.java":"import java.util.Random;\n\n// The reading of the pressure value from the sensor is simulated in this implementation.\n// Because the focus of the exercise is on the other class.\n\npublic class Sensor {\n    public static final double OFFSET = 16;\n\n    public double popNextPressurePsiValue() {\n        double pressureTelemetryValue;\n        pressureTelemetryValue = samplePressure( );\n\n        return OFFSET + pressureTelemetryValue;\n    }\n\n    private static double samplePressure() {\n        // placeholder implementation that simulate a real sensor in a real tire\n        Random basicRandomNumbersGenerator = new Random(42);\n        double pressureTelemetryValue = 6 * basicRandomNumbersGenerator.nextDouble() * basicRandomNumbersGenerator.nextDouble();\n        return pressureTelemetryValue;\n    }\n}\n","cyber-dojo.sh":"rm -f *.class\njavac -cp .:`ls *.jar | tr '\\n' ':'`  *.java   \nif [ $? -eq 0 ]; then\n  java -cp .:`ls *.jar | tr '\\n' ':'` org.junit.runner.JUnitCore `ls -1 *Test*.class | grep -v '\\\\$' | sed 's/\\(.*\\)\\..*/\\1/'`\nfi","instructions":"\nWrite the unit tests for the Alarm class. Initially, do not change\nthe code for Alarm or Sensor. When you have an initial test in \nplace, review your test code together with the session facilitator.\n\nThen you may refactor the code to make it testable. Take care when \nrefactoring not to alter the functionality, or change interfaces which \nother client code may rely on. Add more tests to cover the functionality \nof the Alarm class. \n\nThe Alarm class is designed to monitor tire pressure and set an alarm \nif the pressure falls outside of the expected range. \n\nThe Sensor class provided for the exercise fakes the behaviour of a \nreal tire sensor, providing random but realistic values.","output":"JUnit version 4.11-SNAPSHOT-20120416-1530\n.E\nTime: 0.009\nThere was 1 failure:\n1) foo(AlarmTest)\njava.lang.AssertionError\n\tat org.junit.Assert.fail(Assert.java:91)\n\tat org.junit.Assert.assertTrue(Assert.java:42)\n\tat org.junit.Assert.assertTrue(Assert.java:53)\n\tat AlarmTest.foo(AlarmTest.java:10)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:616)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:269)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:69)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:48)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:24)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:237)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:61)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:235)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:51)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:228)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:306)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:151)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:130)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:111)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:92)\n\tat org.junit.runner.JUnitCore.runMainAndExit(JUnitCore.java:47)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:38)\n\nFAILURES!!!\nTests run: 1,  Failures: 1\n\n"}}